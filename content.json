[{"title":"CentOS 7 上安裝與設定 Nginx + PHP7","date":"2017-06-22T11:18:20.000Z","path":"2017/06/22/nginx-with-php7/","text":"在過去很多人選用的 Web Server 都是 Apache，但最近許多人有了不同的選擇，就是 LNMP，其中 Web Server 改成了 Nginx，在這裡也跟大家一起來建置其中的 Nginx + PHP7。 注：以下的環境是在 GCE (Google Compute Engine) + CentOS7 上完成。 安裝 Nginx要先在 yum 中增加 Nginx，手動加入 repo 設定，這樣就可以透過 yum 安裝 12# 讓 yum 能找到 nginx$ vim /etc/yum.repos.d/nginx.repo 不同的 OS 有不一樣的設定，以下是我的設定 (CentOS7)，其中的 $releasever 改成 7 12345[nginx]name=nginx repobaseurl=http://nginx.org/packages/centos/$releasever/$basearch/gpgcheck=0enabled=1 設定好了以後確認版本 (我的版本是 1.10.2) 1$ yum info nginx 安裝 1$ sudo yum install -y nginx 啟用 &amp; 設定開機啟動 12$ sudo systemctl start nginx$ sudo systemctl enable nginx 再來就可以試試看可不可以連線啦～成功的話就會看到以下畫面 安裝 PHP7因 CentOS 裡的 yum 沒有收錄 PHP，所以自行加入 PHP 7.1 的套件源，這裡就先安裝 webtatic 的 repo，再透過 yum 安裝 PHP 123456# epel$ sudo rpm -Uvh https://dl.fedoraproject.org/pub/epel/epel-release-latest-7.noarch.rpm# webtatic$ sudo rpm -Uvh https://mirror.webtatic.com/yum/el7/webtatic-release.rpm# PHP$ sudo yum install -y php71w-cli php71w-fpm php71w-common php71w-pdo php71w-mbstring 啟用 &amp; 設定開機啟動 12$ sudo systemctl start php-fpm $ sudo systemctl enable php-fpm 確認安裝 &amp; 查詢版本 1$ php -V 設定 Nginx 和 PHP7設定 Nginx 可支援 PHP，在需要的服務中加上以下片段，以我的需求是希望全部都支援 PHP，故加在全域的 server 區塊中： 1$ sudo vim /etc/nginx/nginx.conf 1234567location ~* \\.php$ &#123; fastcgi_pass 127.0.0.1:9000; fastcgi_index index.php; fastcgi_split_path_info ^(.+\\.php)(.*)$; include fastcgi_params; fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;&#125; Nginx Server 啟動所使用的使用者 CentOS 預設用 nginxVirtual Host 放在 /etc/nginx/conf.d/*.conf 再來就是設定 PHP-FPM 1$ vim /etc/php-fpm.d/www.conf 12user = nginxgroup = nginx Nginx 的預設目錄是 /usr/share/nginx/html，在目錄下建一個 index.php 測試是否可以正常運行","tags":[{"name":"MacOSX","slug":"MacOSX","permalink":"http://blog.dexiang.me/tags/MacOSX/"},{"name":"git","slug":"git","permalink":"http://blog.dexiang.me/tags/git/"}]},{"title":"開始動手做吧～ 在 GCP 上建立自己的虛擬主機","date":"2017-06-19T08:04:30.000Z","path":"2017/06/19/start-gcp-and-gce/","text":"最近申請了 GCP 上的帳號，首年免費試用，且送 300 美金，立馬開一台來玩玩啊。上面也有免費的機器可以使用，在盤算著是否可以把 AWS 上一些小的測試服務搬過來。 GCP 試用服務第一年免費獲得 $300 美元的試用額度，當 12 個月後或用完 $300 美元試用額度後結束試用，若是沒有用完，這筆金額將在 12 個月後作廢。Google Cloud Platform 主控台頂端會顯示剩餘的試用額度和天數。 GCP 永久免費服務 Google Compute Engine 每個月 1 台 f1-micro VM (限定 US regions，除 Northern Virginia：us-central1、us-west1、us-east1) 每個月 30 GB 硬碟 &amp; 5 GB 快照 每個月 1 GB 的網路出口流量 (除了中國和澳洲) Google Cloud Datastore 1 GB storage 50,000 reads, 20,000 writes, 20,000 deletes Google Cloud Storage 每個月 5 GB of Regional Storage (US regions only) 5000 Class A Operations per month 50000 Class B Operations per month 1 GB network egress from North America to all region destinations per month (excluding China and Australia) Google Cloud Functions 2 million invocations per month (includes both background and HTTP invocations) 400,000 GB-seconds, 200,000 GHz-seconds of compute time 5 GB network egress per month 這裡只介紹了部分的服務，若是有興趣的可以參考 GCP 完整的介紹https://cloud.google.com/free/docs/always-free-usage-limits/ 了解完方案後，就可以開始建立自己的專案啦～ 建立自己的虛擬主機建立專案 點選上方功能列 → 選擇新增專案填 → 寫專案名稱 建立 VM 執行個體選擇剛建立的專案 → 進入 Compute Engine → VM 執行個體 → 建立 區域：可選擇您所在的區域，像我因為要開免費的機器，所以選擇 us-west1費率：右方可以估算您目前開的機器大概會花費多少若是是 WEB server 記得要開防火牆 連線 VM建立以後就要要連上去啦～我在這裡是用 SSH 的方式去連線。 方法是：到 Compute Engine → 設定中繼資料 → SSH 金鑰 → 填入你的 SSH public key","tags":[{"name":"GCP","slug":"GCP","permalink":"http://blog.dexiang.me/tags/GCP/"},{"name":"GCE","slug":"GCE","permalink":"http://blog.dexiang.me/tags/GCE/"}]},{"title":"刪除 .DS_Store 隱藏檔","date":"2017-06-17T08:50:20.000Z","path":"2017/06/17/remove-ds-store/","text":"最近新買了一台 NAS，在連線的時候常常會發現多了 .DS_Store 這個隱藏檔，平常在 Mac 上倒是無所謂，但是出現在 NAS 裡就覺得煩人了 DS_Store.DS_Store (Desktop Services Store) 是一種 Mac OS X 作業系統所創造的隱藏文件，目的在於存貯目錄的自定義屬性，例如文件們的圖標位置或者是背景色的選擇。 刪除 DS_Store刪除當前目錄下的 .DS_Store 檔案（包含子目錄）： 1$ find . -name &quot;.DS_Store&quot; -depth -exec rm &#123;&#125; \\; 刪除系統上所有 .DS_Store 檔案： 1$ sudo find / -name &quot;.DS_Store&quot; -depth -exec rm &#123;&#125; \\; 自動產生 DS_Store關閉系統自動產生 .DS_Store 的服務 1$ defaults write com.apple.desktopservices DSDontWriteNetworkStores true 恢復自動產生 .DS_Store 的服務 1$ defaults delete com.apple.desktopservices DSDontWriteNetworkStores Git &amp; .DS_Store另外在使用 git 時也會遇到 .DS_Store 追蹤，這裡也記錄一下解法 可使用 git rm -f 來移除掉特定的檔案 1$ git rm -f *.DS_Store","tags":[{"name":"MacOSX","slug":"MacOSX","permalink":"http://blog.dexiang.me/tags/MacOSX/"},{"name":"git","slug":"git","permalink":"http://blog.dexiang.me/tags/git/"}]},{"title":"雲端 PK - AWS & GCP","date":"2017-06-06T11:18:13.000Z","path":"2017/06/06/gcp-vs-aws/","text":"近年來雲端平台的服務應該大家都不陌生吧～它讓我們可以將維護與建置的工作交付給雲端平台去處理；雲端化以後 IT 維護改由雲端供應商負責，讓我們能花更多的專注力在創新研發上，還能加速部署與模型的建置，使得產品業務更靈活。 那麼，到底該怎麼挑選適合自己公司的雲端？先來基礎複習一下，主要的三種雲端服務類型 IaaS（Infrastructure as a Service，基礎設施即服務）、PasS（Platform as a Service，平台即服務）、SaaS（Software as a Service，軟體即服務），各家平台在服務上也略有不同： 該選哪朵雲？基礎建設 AWS GCP 地理區域數量 16 regions, 42 zones 9 regions, 27 zones 未來擴點 3 regions 8 regions, 20 zones Taiwan 有無 regions X V Link https://aws.amazon.com/tw/about-aws/global-infrastructure/ https://cloud.google.com/about/locations/ 機器類型 &amp; 運算能力GCP 可自訂機器類型，但價錢來說差不多 計費方式 GCP 以分計費，提供免費服務 (特定機器) AWS 以時計費 試算工具AWS：http://calculator.s3.amazonaws.com/index.htmlGCP：https://cloud.google.com/products/calculator/ 服務項目 AWS 種類玲琅滿目 GCP 服務較少 服務對照 AWS GCP 雲端虛擬伺服器 Amazon EC2 Google Compute Engine 無伺服器 AWS Lambda Google Cloud Functions 隔離雲端資源 Amazon Virtual Private Cloud (VPC) Google Cloud Virtual Network 雲端儲存 Amazon S3 Google Cloud Storage 關聯式資料庫 Amazon RDS Google Cloud SQL NoSQL Amazon DynamoDB Google Cloud Bigtable CDN AWS Cloudfront Google Cloud CDN 監控 Amazon CloudWatch Google Cloud Monitoring and Google Cloud Logging 權限管理 AWS Identity and Access Management (IAM) Google Cloud Identity &amp; Access Management (Cloud IAM) DNS Amazon Route 53 Google Cloud DNS 結語大多數的人聽到雲端，第一個想到的大多都是 AWS，但目前各家雲端競爭激烈，除了上述介紹的以外還有 MS 的 Azure 等，各家也不斷的在推出新的服務及費率，也或許不會只採用一家的服務，建議還是依照自己的需求選擇自己合適的服務。","tags":[{"name":"AWS","slug":"AWS","permalink":"http://blog.dexiang.me/tags/AWS/"},{"name":"GCP","slug":"GCP","permalink":"http://blog.dexiang.me/tags/GCP/"}]},{"title":"簡介 HTTP & HTTPS & HTTP2 協定","date":"2017-03-03T10:03:43.000Z","path":"2017/03/03/about-hyper-text-transfer-protocol/","text":"科技來自於人性，知識的傳遞原本是透過書本或口述，但是當網路出現後，人們想要在上傳遞資訊，就得要制定出一些規則，經過不斷修改，最後總結成了一個協定，把它命名為 HyperText Transfer Protocol。 HTTP一種網路傳輸協定，全名是：HyperText Transfer Protocol，設計初衷是為了傳輸 HTML，中間也推出了數個版本，現今最被廣泛使用的是 HTTP1.1。 HTTP 進程 HTTP/0.9：已過時。只接受GET一種請求方法，沒有在通訊中指定版本號，且不支援請求頭。由於該版本不支援POST方法，因此用戶端無法向伺服器傳遞太多資訊。 HTTP/1.0：這是第一個在通訊中指定版本號的HTTP協定版本，至今仍被廣泛採用，特別是在代理伺服器中。 HTTP/1.1：持久連線被預設採用，並能很好地配合代理伺服器工作。還支援以管道方式在同時傳送多個請求，以便降低線路負載，提高傳輸速度。 ※ 引述自 維基百科 HTTP &amp; TCPHTTP 是基於 TCP 協定，由 Client 發起，預設走 80 Port。在網路分層中由上而下依序是應用、表現、會議、傳輸、網路、鏈結、實體， TCP 是傳輸層協定，HTTP 是應用層，也就是說這是不一樣的東西，TCP 是解決數據如何在網路傳輸，HTTP 是解決如何包裝數據。 HTTP keep-alive在 HTTP/1.0 的時候預設的方式是沒有 keep-alive，每一次的連線都是獨立的，在 HTTP/1.1 的時候 keep-alive 是預設開啟的，當多個 request 到同一台時會使用同一個 TCP 連線來傳送和接收，因開關 TCP 連線是有時間成本和 CPU 成本的，如此一來可獲得低網路阻塞和優化效能等等的好處。 Why HTTPS?資訊安全無疑是近幾年討論的話題之一，不論是企業或是個人都需要“保密防諜”，且在 Chrome 56 開始會將網頁的安全資訊直接顯示在網址列，綠色勾勾就跟一個認證一樣，而後 Firefox 51 也跟進這個機制。 HTTPS全名是：Hyper Text Transfer Protocol over Secure Socket Layer，是 Netscape 在 1994 年創建，簡單來說 HTTPS 就是 HTTP 的加強版，在 HTTP 上增加了 SSL/TLS 的協定。原本在 HTTP 上的傳遞是明碼的，不加密的狀態下可能有幾項風險： 竊聽風險（eavesdropping）：第三方可以獲知通信內容。 篡改風險（tampering）：第三方可以修改通信內容。 冒充風險（pretending）：第三方可以冒充他人身份參與通信。 所以就基於 HTTP 再加上了加密的協議，SSL/TLS 協議是為了解決這三大風險而設計的，希望達到： 所有信息都是加密傳播，第三方無法竊聽。 具有校驗機制，一旦被篡改，通信雙方會立刻發現。 配備身份證書，防止身份被冒充。 SSL &amp; TLSSSL 全名：Secure Sockets Layer，是由 NetScape 所設計，經過了多次的修改而廣泛被應用，之後 IETF 將 SSL 進行標準化，並改名為 TLS，全名為：Transport Layer Security。 對稱加密 &amp; 非對稱加密 &amp; HASH 對稱加密：加密和解密使用同一個金鑰的加密演算法。 非對稱加密：需兩個金鑰來進行加密和解密，分別是公鑰 (public key) 和私鑰 (private key)。 HASH：也稱為雜湊。MD5雜湊演算法可以將任意長度的資料經由運算之後，得到一組固定長度為 128 位元 (32 個十六進制數字) 的結果，我們可以使用這個結果當作檢查碼 (Checksum)。 運作原理用對稱加密來加密網頁，用非對稱加密來保護對稱加密的金鑰，這樣互補了兩個演算法的缺點。那麼如何保證非對稱加密的公鑰不被篡改呢？ 只要將公鑰放在數位證書中，只要證書是可信的，公鑰就是可信的。因此，SSL/TLS協議的基本過程是這樣的： 客戶端向伺服器端要求並驗證非對稱加密算法的公鑰。 雙方協商生成對稱加密算法的 “對話密鑰”。 雙方採用對稱加密算法和它的 “對話密鑰” 進行加密通信。 上面過程的前兩步，又稱為 “握手階段” (handshake)。 感覺越寫越多，但這篇只是淺談，所以先講到此，有機會再開一篇來細說。 Why HTTP2?前面說了 HTTP &amp; HTTPS 通訊協定是全球資訊網 (WWW) 的基礎，在 Internet 上佔了很大一部分，這幾十年網路生態的改變，成長之快，數量之多，任何一點點的效能速度都足以產生巨大影響。在這久未更新的協定中缺點也就越來越明顯了。以下有幾個參考可以觀察出 HTTP2 在速度上的優異： Akamai：HTTP1.1 VS HTTP2 HTTP/2 TECHNOLOGY DEMO HTTP2前面說了 HTTP &amp; HTTPS 通訊協定是全球資訊網 (WWW) 的基礎，而HTTP2 是自 1999 年 HTTP1.1 以來最重要的一次升級，主要目的是為了改善網頁的下載速度， 目前各大瀏覽器包括 Chrome、Safari、Firefox、IE/Edge 都已經支援 HTTP2。 隨著網頁的內容越來越複雜，有時候甚至於一個網站數十或數百個 request 到 server。在 HTTP1.1 時，每一個請求都必須佔用一個連線 (TCP connection)，為了加速網站只好開多個連線併發請求。而在 HTTP2 改善了這一點，差別如下： 連線多工 (Multiplexing)，在單一網路連線上，就可以同時傳輸多個 HTTP Request 和 Response，併發請求 CSS/JS/Images 等等資源。它的原理是將 Requests/Responses 都拆碎成小的 frames 進行傳輸，且這些 frames 是可以交錯的，因此檔案再多也不怕，不會發生佔用網路連線 (TCP connection) 的情況。也只需要單一連線就可以處理。 可決定檔案優先順序 Header 壓縮 需要 HTTPS要先擁有 TLS/SSL 安全性憑證，除了有更快速度，同時也要求了更好的網路安全。 後記其實在寫這篇的過程中，好幾度煞不住車，越寫越細，包括各個協定的細節、原理還有延伸出去的技術，甚至於實作的部分，導致於篇幅越來越大，但是怕這篇會變成大雜燴，就只好先簡述個大概了，待以後再補完各個的細節及實作。","tags":[{"name":"http","slug":"http","permalink":"http://blog.dexiang.me/tags/http/"},{"name":"https","slug":"https","permalink":"http://blog.dexiang.me/tags/https/"},{"name":"http2","slug":"http2","permalink":"http://blog.dexiang.me/tags/http2/"},{"name":"TCP","slug":"TCP","permalink":"http://blog.dexiang.me/tags/TCP/"},{"name":"ssl","slug":"ssl","permalink":"http://blog.dexiang.me/tags/ssl/"},{"name":"tls","slug":"tls","permalink":"http://blog.dexiang.me/tags/tls/"}]},{"title":"Hexo 草稿","date":"2017-02-02T11:08:43.000Z","path":"2017/02/02/hexo-draft/","text":"在寫部落格的時候常常會因為篇幅過大沒辦法一次編寫完成，或是同時編寫多篇文章，這時候就會希望不要把這些文章發佈出去。 建立草稿1$ hexo new draft &lt;title&gt; Hexo 建立草稿後會產生檔案在 source/_drafts 下，在這目錄之下的文件不會被發佈出去。 預覽草稿那若是我想要看看我編輯的文章要怎麼辦呢？Hexo 提供了下面的方法： 1$ hexo server --draft 發佈草稿1$ hexo publish &lt;file&gt; ※ file 不包含副檔名","tags":[{"name":"hexo","slug":"hexo","permalink":"http://blog.dexiang.me/tags/hexo/"},{"name":"draft","slug":"draft","permalink":"http://blog.dexiang.me/tags/draft/"}]},{"title":"Hexo 指南","date":"2017-01-20T07:08:26.000Z","path":"2017/01/20/hexo-guide/","text":"其實目前官網的文件非常詳細，這裡就不多做介紹了。 安裝 Hexo1$ npm install hexo-cli -g 建立 &amp; 初始化123$ hexo init &lt;folder&gt;$ cd &lt;folder&gt;$ npm install 建立後會有以下資料夾 &amp; 檔案 123456789.├── _config.yml # 網站設定檔├── package.json├── scaffolds # 鷹架資料夾├── scripts # 腳本資料夾├── source| ├── _drafts| └── _posts└── themes # 主題 配置※ 官方設定檔文件 常用指令1234567891011121314# 查看幫助hexo help# 新建文章hexo new &quot;postName&quot;# 新建頁面hexo new page &quot;pageName&quot;# 產生靜態網頁hexo generate# 本機預覽hexo server# 部署hexo deploy# 清除暫存，執行前建議使用hexo clean 簡寫12345&gt; hexo n == hexo new&gt; hexo g == hexo generate&gt; hexo s == hexo server&gt; hexo d == hexo deploy&gt; 部署到 Git透過 Git 發佈，安裝 Git 套件 1$ npm install hexo-deployer-git --save 修改 _config.yml 設定值 123456# Deploymentdeploy: type: git repo: git@github.com:dexiang/dexiang.github.io.git branch: master message: 設定好以後就可以部署了 1$ hexo deploy GitHub Page Domain Name 設定首先當然要先有 Domain Name 啦～ 設定好以後，可透過 CNAME 設定到部落格上。 另外在每次 deploy 到 Github 上時，CNAME 會一直被覆蓋，怎麼辦呢？ 安裝 CNAME，在 deploy 時自動產生 CNAME 檔案 1$ npm install hexo-generator-cname --save 123$ cd source/$ touch CNAME$ vim CNAME # 輸入domain，EX：dexiang.tw 主題每一家的 Theme 都有長處，可依個人喜好，以下是以 github 星星數整理出來的排名。 NexT https://github.com/iissnan/hexo-theme-next Yilia https://github.com/litten/hexo-theme-yilia Tranquilpeak https://github.com/LouisBarranqueiro/hexo-theme-tranquilpeak Yelee https://github.com/MOxFIVE/hexo-theme-yelee Jacman https://github.com/wuchong/jacman Maupassant https://github.com/tufu9441/maupassant-hexo Apollo https://github.com/pinggod/hexo-theme-apollo Icarus https://github.com/ppoffice/hexo-theme-icarus Material https://github.com/viosey/hexo-theme-material Fexo https://github.com/forsigner/fexo 我選用的是 Yilia Theme 常見問題 修改配置時需注意 YAML 語法，參數冒號後 (:) 一定要留一個空格 所有問題請轉成 UTF-8 格式","tags":[{"name":"hexo","slug":"hexo","permalink":"http://blog.dexiang.me/tags/hexo/"}]},{"title":"Hexo 簡介","date":"2017-01-18T11:08:43.000Z","path":"2017/01/18/hexo-introduction/","text":"幾年前因為想寫一些文章而用 wordpress 架設了一網站，但覺得要管理維護太麻煩，後來就改到 Blogger，雖然它的功能很方便，與 google 的產品結合 (GA)，且有 SEO 的優勢，但一方面是想要有更高的控制權，另一方面是想換一個工具試試看。 什麼是 HexoHexo 是一個基於 Node.js 的部落格框架，可透過 Hexo 快速產生一個部落格，只需要幾行指令就可以搞定。安裝環境也是。支援 MarkDown 語法且兼容 那什麼又是 Node.jsNode.js 是採用 Google V8 引擎來運行 javascript 環境。 為何選擇 Hexo 容易安裝，只要安裝好 Node.js &amp; Git，幾行指令就可以安裝完成 方便部署，產生靜態網頁並整合 Git，且編譯速度快，可在 Github 上建立 blog，無限流量，不需建置 Server 用 MarkDwon 來寫文章，讓自已可以專心在文章的內容，而不用去煩惱版面，且任意編輯器都可以拿寫文章 在挑選 Blogger 的過程中，發現不少社群的朋友都選擇這一套，網路的資源也多 準備工作 Node.js Git Xcode (Mac) MarkDown 編輯器 (非必須) Domain Name (非必須)","tags":[{"name":"hexo","slug":"hexo","permalink":"http://blog.dexiang.me/tags/hexo/"}]},{"title":"雲端主機","date":"2016-12-09T16:33:06.000Z","path":"2016/12/10/Cloud-Server/","text":"之前有一大段時間都把服務放在 AWS 的 EC2 上，但最近在整理環境的時候開始思考，以我的需求有需要把服務放在 EC2 上嗎？ 就開始研究相關的服務，查了一些文章及同事的推薦，就想說把這些訊息分享出來。 虛擬主機若是有玩過虛擬機的人，例如 VMware、VirtualBox 這些東西，其實原理是一樣的。虛擬主機就像大通舖一樣，一群人要一起共用設施，床位也可能因為旁人的影響而限縮，但優點就是便宜。 VPSVPS 是 Virtual Private Server 的縮寫，就是在一台機器上以軟體的方式模擬成多台機器，讓這些機器能分享CPU、記憶體、硬碟…等硬體資源，並各自運作不同的程式，不互相干擾。VPS 就像套房一樣，有獨立的衛浴及設施，相對的價格比較高。 目前 VPS 的技術比較常見的兩種，分別為 Xen 跟 OpenVZ，兩者使用的虛擬技術不太一樣，OpenVZ 的每一台虛擬機的資源由 OpenVZ 動態控制著，共用著所有的 kernel，實體上來說，每一部虛擬機器並不是真的擁有自己的資源 ( CPU、記憶體…)；而 Xen 則是以模擬硬體的方式，讓每部虛擬機器擁有自己的各種硬體環境，所以，每部虛擬機器是完全獨立的，一旦分到多少的資源，就是多少，不像 OpenVZ 那樣可以動態的調整，因此，採用 XEN 的電腦所能夠分割出來的虛擬機器數量，因為被固定住資源，所以，可能會比較 OpenVZ 來的少。 主機代管 / 實體主機其實 VPS 的需求對我來說已經很夠用了，但是若是需要考慮到安全和擴充性可以再往上考慮主機代管或實體主機的方案，這兩個方案可以由自己的需要來擴充設備，不同於 VPS 來說，是真正獨立的資源。若 VPS 是租房，那麼這方案就是買房了，可以完全由自己決定要甚麼樣的建築及結構。 EC2VPS 的一種，採用 Xen 技術，與一般的 VPS 不同的是它的彈性很大，有不同的 region 可供選擇，且依照小時來計價，更有彈性。 另外，在 2016/11/30 Amazon 也開始有平價 VPS 供選擇：Amazon Lightsail，一個月最低 5 美元，第一個月免費。","tags":[]},{"title":"雲端服務","date":"2016-12-09T16:33:06.000Z","path":"2016/12/10/Cloud-Computing/","text":"雲端運算的比喻：對於一名用戶，由提供者提供的服務所代表的網路元素都是看不見的，仿佛被雲端掩蓋。 軟體即服務 Software as a Service, SaaS平台即服務 Platform as a Service, PaaS基礎設施即服務 Infrastructure as a Service, IaaShttp://image.slidesharecdn.com/cloud-computing-v261-100301154155-phpapp01/95/presentation-on-effectively-and-securely-using-the-cloud-computing-paradigm-v26-15-728.jpg?cb=1267458215 https://zh.wikipedia.org/wiki/%E9%9B%B2%E7%AB%AF%E9%81%8B%E7%AE%97 https://www.cloudopenlab.org.tw/ccipo_industryDefinition.do","tags":[]},{"title":"MarkDown 介紹","date":"2016-12-01T16:03:12.000Z","path":"2016/12/02/MarkDown-Introduction/","text":"Markdown 是一個輕量的標記語言，主要目的是讓人們可以不用 HTML 等複雜繁長的語法就能夠標記格式進而達到管理文件的目的。 標題（Header）Markdown支援兩種標題的語法，Setext 和 Atx 形式。Setext 形式是用底線的形式，利用 =（最高階標題）和 -（第二階標題），例如： 12345This is an H1=============This is an H2------------- 任何數量的 = 和 - 都可以有效果。 Atx 形式則是在行首插入 1 到 6 個 #，各對應到標題 1 到 6 階，在結尾加上任意 # (通常都會加上對等的數量)，例如： 123456# H1## H2### H3#### H4##### H5###### H6 段落（Paragraph）在 Markdown 中，只要是連續的行就會被當成 HTML 中的 paragraph。 在使用上，一般要將 paragraph 與paragraph 之間以一個到數個空行間隔開來。讀者也可以使用兩個空格加一個 return（換行）來區隔。Markdown 會把這轉成一個 br 的標記。 水平分隔線（Horizontal Rules）三個或三個以上的符號，必須在獨立的一行，前後不能有其他文字。短橫線（Hyphens） 1--- 半形星號（Asterisks） 1*** 下底線（Underscores） 1___ 引言（Block Quotes）Markdown 可以用 &gt; 來標示文字區塊，就像在email裡一樣： 123456&gt; This is a blockquote with two paragraphs. Lorem ipsum dolor sit amet,&gt; consectetuer adipiscing elit. Aliquam hendrerit mi posuere lectus.&gt; Vestibulum enim wisi, viverra nec, fringilla in, laoreet vitae, risus.&gt; &gt; Donec sit amet nisl. Aliquam semper ipsum sit amet velit. Suspendisse&gt; id sem consectetuer libero luctus adipiscing. 區塊引言可以有階層（例如：引言內的引言），只要根據層數加上不同數量的 &gt;： 12345&gt; This is the first level of quoting.&gt;&gt; &gt; This is nested blockquote.&gt;&gt; Back to the first level. 引言的區塊內也可以使用其他的Markdown語法，包括標題、清單、程式碼區塊等： 12345678&gt; ## This is a header.&gt; &gt; 1. This is the first list item.&gt; 2. This is the second list item.&gt; &gt; Here&apos;s some example code:&gt; &gt; return shell_exec(&quot;echo $input | $markdown_script&quot;); 清單（Bullet Points）Markdown支援有序清單和無序清單。無序清單使用星號、加號或是減號作為清單標記： 123- Red- Green- Blue 有序清單則使用數字接著一個英文句點： 1231. Bird2. McHale3. Parish 連結Markdown 支援兩種形式的連結語法：inline 和 reference 兩種形式。行內： 12This is [an example](http://example.com/ &quot;Title&quot;) inline link.[This link](http://example.net/) has no title attribute. 參考： 12This is [an example][id] reference-style link.[id]: http://example.com/ &quot;Optional Title Here&quot; 圖片Markdown 使用一種和連結很相似的語法來標記圖片，同樣也允許兩種樣式：inline 和 reference。行內： 12![Alt text](/path/to/img.jpg)![Alt text](/path/to/img.jpg &quot;Optional title&quot;) 參考： 12![Alt text][id][id]: url/to/image &quot;Optional title attribute&quot; 粗體1**Bold** 1__Bold__ 斜體1*Italic* 1_Italic_ 刪除線1~~Strike lines~~ 表格冒號（Colons）是用來對齊的（擺左齊左、擺右齊右，都擺就置中）。預設標題置中，內容置左。 Text Align Center Align Right Align Left content1 Longer content1 content1 content1 Longer content2 content2 content2 content2 content3 content3 content3 content3 12345| Text | Align Center | Align Right | Align Left || --------------- |:----------------:| -----------:|:------------|| content1 | Longer content1 | content1 | content1 || Longer content2 | content2 | content2 | content2 || content3| content3 | content3 | content3 | 程式碼如果要標記一小段行內程式碼，你可以用反引號（backticks）把它包起來（`），例如： 1Use the `printf()` function. 若是要包起整段程式碼區塊可以用 ``` 把它包起來。","tags":[{"name":"MarkDown","slug":"MarkDown","permalink":"http://blog.dexiang.me/tags/MarkDown/"}]},{"title":"AWSome Day","date":"2016-11-22T16:33:06.000Z","path":"2016/11/23/AWSome-Day/","text":"簡介 AWS 服務2016-11-22 去參加 AWSome Day","tags":[{"name":"AWS","slug":"AWS","permalink":"http://blog.dexiang.me/tags/AWS/"}]},{"title":"AWS EC2 LAMP (2)","date":"2016-10-17T16:00:06.000Z","path":"2016/10/18/AWS-EC2-LAMP-2/","text":"上一篇介紹了如何建置 LAMP 環境，這篇要來介紹如何建立一個網頁服務的相關設定 Domain name想到網頁當然第一個想到的是網址也就是 Domain name我用的是 godaddy，到上面去設定 A Record 就可以了 Apache 設定若是有需要在一台機器上設定多個網站，那麼就用 virtualhost 吧 virtualhost建立預存放目錄 12# XXX 表示專案名稱$ mkdir /var/www/workspace/XXX 修改 Apache 設定 1$ vi /etc/httpd/conf/httpd.conf 12345678910111213# XXX 專案&lt;VirtualHost *:80&gt; ServerAdmin administrator@mail.com ServerName XXX.domain.com ServerAlias domain.com DocumentRoot &quot;/var/www/workspace/XXX&quot; &lt;Directory &quot;/var/www/workspace/XXX&quot;&gt; AllowOverride All Options FollowSymlinks MultiViews Require all granted &lt;/Directory&gt;&lt;/VirtualHost&gt; 重啟 Apache 1$ service httpd restart phpMyAdmin若是需要由網頁來 access MySQL，phpMyAdmin 不失為一個選擇我自己是下載 phpMyAdmin-4.4.11-all-languages.tar.xz 解壓縮 1$ tar -Jxvf phpMyAdmin-4.4.11-all-languages.tar.xz 變更檔名 1$ mv phpMyAdmin-4.4.11-all-languages phpMyAdmin 移動檔案 1$ cp -r phpMyAdmin /var/www 設定 phpMyAdmin 12$ cp config.sample.inc.php config.inc.php$ vi config.inc.php 1$cfg[&apos;Servers&apos;][$i][&apos;auth_type&apos;] = &apos;http&apos;; 修改 Apache 設定 1$ vi /etc/httpd/conf/httpd.conf 1Alias /phpMyAdmin &quot;/var/www/phpMyAdmin&quot; 重啟 Apache 1$ service httpd restart","tags":[{"name":"AWS","slug":"AWS","permalink":"http://blog.dexiang.me/tags/AWS/"},{"name":"EC2","slug":"EC2","permalink":"http://blog.dexiang.me/tags/EC2/"},{"name":"LAMP","slug":"LAMP","permalink":"http://blog.dexiang.me/tags/LAMP/"},{"name":"Apache","slug":"Apache","permalink":"http://blog.dexiang.me/tags/Apache/"},{"name":"PHP","slug":"PHP","permalink":"http://blog.dexiang.me/tags/PHP/"},{"name":"MySQL","slug":"MySQL","permalink":"http://blog.dexiang.me/tags/MySQL/"}]},{"title":"AWS EC2 LAMP (1)","date":"2016-10-16T16:33:06.000Z","path":"2016/10/17/AWS-EC2-LAMP-1/","text":"使用 Linux 架設 web server，LAMP 是非常常用的選擇，LAMP 代表 Linux + Apache + MySQL + PHP，當然還有很多的組合，像是 LNMP (Linux + Nginx + MySQL + PHP) 等等的搭配，但這篇就先針對 LAMP 做介紹。 首先這篇採用 EC2 主機搭配作介紹，皆用 yum 安裝。 在安裝過程中因權限的關係，以下皆是以 root 的身分。 安裝 LAMPyum查詢是否有安裝yum1$ rpm -qa | grep yum 更新所有已安裝的套件 (-y 表示安裝更新時不跳確認提示)1$ yum update -y Apache、PHP、MySQL安裝 Apache、PHP、MySQL1$ yum install -y httpd24 php56 mysql55-server php56-mysqlnd php56-mbstring 修改 php.ini1$ vi /etc/php.ini 123456; PHP tag 簡寫 (應該是要保持關閉的....，但因為有些 legacy code，慚愧...)short_open_tag = On; 時區date.timezone = Asia/Taipei; 最大上傳檔案大小upload_max_filesize = 50M 啟用服務12$ service httpd start$ service mysqld start 設定 mysql 管理者密碼12345# XXXX 表示密碼# 設定密碼$ mysqladmin -u root password &apos;XXXX&apos;# 修改密碼$ mysqladmin -u root -p password &apos;XXXX&apos; 設定開機時啟用12$ chkconfig httpd on$ chkconfig mysqld on","tags":[{"name":"AWS","slug":"AWS","permalink":"http://blog.dexiang.me/tags/AWS/"},{"name":"EC2","slug":"EC2","permalink":"http://blog.dexiang.me/tags/EC2/"},{"name":"LAMP","slug":"LAMP","permalink":"http://blog.dexiang.me/tags/LAMP/"},{"name":"Apache","slug":"Apache","permalink":"http://blog.dexiang.me/tags/Apache/"},{"name":"PHP","slug":"PHP","permalink":"http://blog.dexiang.me/tags/PHP/"},{"name":"MySQL","slug":"MySQL","permalink":"http://blog.dexiang.me/tags/MySQL/"}]}]